using QoDL.Toolkit.Core.Config;
using QoDL.Toolkit.Core.Extensions;
using QoDL.Toolkit.Core.Modules.ReleaseNotes.Abstractions;
using QoDL.Toolkit.Core.Modules.ReleaseNotes.Models;
using QoDL.Toolkit.Core.Util;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace QoDL.Toolkit.Core.Modules.ReleaseNotes.Providers;

/// <summary>
/// Provides data from a json file path.
/// <para>Caches data in memory when used as a singleton.</para>
/// </summary>
public class TKJsonFileReleaseNotesProvider : ITKReleaseNotesProvider
{
    /// <summary>
    /// Path to the json file containing the releasenotes.
    /// </summary>
    public string FilePath { get; private set; }

    /// <summary>
    /// If set, changes with issue ids will get a link generated by the given function.
    /// <para>Input is issue id.</para>
    /// </summary>
    public Func<string, string> IssueUrlFactory { get; set; }

    /// <summary>
    /// If set, issue links will use a title generated by the given function.
    /// <para>Input is issue id.</para>
    /// </summary>
    public Func<string, string> IssueLinkTitleFactory { get; set; }

    /// <summary>
    /// If set, issue links will use this icon.
    /// <para>Value should be a constant from <see cref="TKMaterialIcons"/>.</para>
    /// </summary>
    public string IssueLinkIcon { get; set; }

    /// <summary>
    /// If set, changes with a pull-request number will get a link generated by the given function.
    /// <para>Input is pull-request number.</para>
    /// </summary>
    public Func<string, string> PullRequestUrlFactory { get; set; }

    /// <summary>
    /// If set, pull-request links will use a title generated by the given function.
    /// <para>Input is pull-request number.</para>
    /// </summary>
    public Func<string, string> PullRequestLinkTitleFactory { get; set; }

    /// <summary>
    /// If set, changes with a commit sha will get a link generated by the given function.
    /// <para>Input is commit sha.</para>
    /// </summary>
    public Func<string, string> CommitShaUrlFactory { get; set; }

    /// <summary>
    /// If set, commit sha links will use a title generated by the given function.
    /// <para>Input is commit sha.</para>
    /// </summary>
    public Func<string, string> CommitShaLinkTitleFactory { get; set; }

    /// <summary>
    /// If set, pull-request links will use this icon.
    /// <para>Value should be a constant from <see cref="TKMaterialIcons"/>.</para>
    /// </summary>
    public string PullRequestLinkIcon { get; set; }

    /// <summary>
    /// If set, the default title will be "Latest release notes" for production and for non-prod "Latest changes"
    /// </summary>
    public Func<bool> IsProduction { get; set; }

    /// <summary>
    /// Use to set title based on e.g. environment.
    /// </summary>
    public Func<string> Title { get; set; }

    private TKReleaseNotesViewModels _cachedModel;

    /// <summary>
    /// Provides data from a json file path.
    /// </summary>
    public TKJsonFileReleaseNotesProvider(string filePath)
    {
        FilePath = filePath;
    }

    /// <inheritdoc />
    public virtual Task<TKReleaseNotesViewModels> GetViewModelAsync()
    {
        if (_cachedModel != null)
        {
            return Task.FromResult(_cachedModel);
        }
        return Task.FromResult(CreateViewModel());
    }

    private TKReleaseNotesViewModels CreateViewModel()
    {
        if (string.IsNullOrWhiteSpace(FilePath) || !File.Exists(FilePath))
        {
            return CreateFileNotFoundResult();
        }

        try
        {
            var json = TKIOUtils.ReadFile(FilePath);
            var model = BuildViewModel(json);
            _cachedModel = model;
            return _cachedModel;
        }
        catch (Exception ex)
        {
            return TKReleaseNotesViewModels.CreateError($"Failed to read release notes.", $"Error: {ex.Message}");
        }
    }

    /// <summary>
    /// Create model when no json file was found.
    /// </summary>
    protected virtual TKReleaseNotesViewModels CreateFileNotFoundResult()
        => TKReleaseNotesViewModels.CreateError("No release notes data was found.");

    /// <summary>
    /// Parses the given json to a view model.
    /// </summary>
    protected virtual TKReleaseNotesViewModels BuildViewModel(string json)
    {
        try
        {
            var fileModel = DeserializeJsonData(json);
            if (fileModel == null)
            {
                return TKReleaseNotesViewModels.CreateError($"Failed to deserialize release notes, model result was null.");
            }

            return new TKReleaseNotesViewModels
            {
                WithDevDetails = BuildViewModel(fileModel, true),
                WithoutDevDetails = BuildViewModel(fileModel, false)
            };
        }
        catch (Exception ex)
        {
            return TKReleaseNotesViewModels.CreateError($"Failed to deserialize release notes.", $"Error: {ex.Message}");
        }
    }

    /// <summary>
    /// Build the view model from the given json file data.
    /// </summary>
    protected virtual TKReleaseNotesViewModel BuildViewModel(TKDefaultReleaseNotesJsonModel data, bool includeDevDetails)
    {
        var title = Title?.Invoke() ?? "Latest release notes";
        if (Title == null && IsProduction?.Invoke() != true)
        {
            title = "Latest changes";
        }

        var changes = data.changes
                ?.Select(x => BuildChangeViewModel(x, includeDevDetails))
                ?.Where(x => x != null)
                ?.ToList()
                ?? new List<TKReleaseNoteChangeViewModel>();

        changes = PostProcessChanges(changes, includeDevDetails);

        var model = new TKReleaseNotesViewModel
        {
            Version = data.version,
            //DeployedAt = DateTime.Now,
            BuiltAt = data.builtAt,

            Title = title,
            Description = "Auto-generated release notes from changes since the previous production deploy.",
            BuiltCommitHash = includeDevDetails ? data.builtCommitHash : null,
            Changes = changes
        };

        return model;
    }

    /// <summary>
    /// Removes duplicates etc when no dev details are shown.
    /// </summary>
    protected virtual List<TKReleaseNoteChangeViewModel> PostProcessChanges(List<TKReleaseNoteChangeViewModel> changes, bool includeDevDetails)
    {
        if (!includeDevDetails)
        {
            changes = changes
                .GroupBy(x => x.Title).Select(x => x.First())
                .ToList();
        }
        return changes;
    }

    /// <summary>
    /// Build a change view model from the given json file data.
    /// </summary>
    protected virtual TKReleaseNoteChangeViewModel BuildChangeViewModel(TKDefaultReleaseNotesChangeJsonModel data, bool includeDevDetails)
    {
        if (string.IsNullOrWhiteSpace(data.issueId) && !includeDevDetails)
        {
            return null;
        }

        List<TKReleaseNoteLinkViewModel> links = new();
        var hasIssueLink = false;
        var hasPrLink = false;
        var hasShaLink = false;

        if (data.issueIds?.Any() == true && IssueUrlFactory != null)
        {
            hasIssueLink = true;
            foreach (var issueId in data.issueIds)
            {
                links.Add(new TKReleaseNoteLinkViewModel
                {
                    Title = IssueLinkTitleFactory?.Invoke(issueId) ?? $"Issue {issueId}",
                    Url = IssueUrlFactory.Invoke(issueId)
                });
            }
        }

        if (includeDevDetails && !string.IsNullOrWhiteSpace(data.pullRequestNumber) && PullRequestUrlFactory != null)
        {
            hasPrLink = true;
            links.Add(new TKReleaseNoteLinkViewModel
            {
                Title = PullRequestLinkTitleFactory?.Invoke(data.pullRequestNumber) ?? $"Pull request #{data.pullRequestNumber}",
                Url = PullRequestUrlFactory.Invoke(data.pullRequestNumber)
            });
        }

        if (includeDevDetails && !string.IsNullOrWhiteSpace(data.hash) && CommitShaUrlFactory != null)
        {
            hasShaLink = true;
            links.Add(new TKReleaseNoteLinkViewModel
            {
                Title = CommitShaLinkTitleFactory?.Invoke(data.hash) ?? $"SHA {data.hash.LimitMaxLength(5, "")}",
                Url = CommitShaUrlFactory.Invoke(data.hash)
            });
        }

        var descriptionBuilder = new StringBuilder();
        if (includeDevDetails && !string.IsNullOrWhiteSpace(data.body))
        {
            descriptionBuilder.Append(data.body?.Trim());
        }
        if (includeDevDetails && !string.IsNullOrWhiteSpace(data.pullRequestNumber) && PullRequestUrlFactory == null)
        {
            descriptionBuilder.Append($"\n\nPull-request #{data.pullRequestNumber}");
        }
        if (data.issueIds?.Count() > 1 && IssueUrlFactory == null)
        {
            descriptionBuilder.Append($"\n\nAlso related to:");
            foreach (var issueId in data.issueIds.Skip(1))
            {
                descriptionBuilder.Append($"\n-{issueId}");
            }
        }

        string title = null;
        if (includeDevDetails)
        {
            title = $"{data.issueId} {data.cleanMessage?.CapitalizeFirst()}".Trim();
        }
        else if (!string.IsNullOrWhiteSpace(data.issueId))
        {
            title = data.issueId;
        }

        return new TKReleaseNoteChangeViewModel
        {
            CommitHash = includeDevDetails ? data.hash : null,
            AuthorName = includeDevDetails ? data.authorName : null,
            Timestamp = data.timestamp,

            Title = title,
            Description = descriptionBuilder.ToString(),

            Links = links,
            MainLink = links.FirstOrDefault()?.Url,

            HasIssueLink = hasIssueLink,
            HasPullRequestLink = hasPrLink,
            HasShaLink = hasShaLink
        };
    }

    /// <summary>
    /// Deserializes the json into the default model.
    /// </summary>
    protected virtual TKDefaultReleaseNotesJsonModel DeserializeJsonData(string json)
        => TKGlobalConfig.Serializer?.Deserialize<TKDefaultReleaseNotesJsonModel>(json);
}
