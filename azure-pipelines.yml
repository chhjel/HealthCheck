variables:
# Static variables
- name: BuildParameters.MainBranchName
  value: master
- name: BuildParameters.Solution
  value: '**\*.sln'
- name: BuildParameters.ArtifactName
  value: drop
- name: BuildParameters.BuildPlatform
  value: 'Any CPU'
- name: BuildParameters.BuildConfiguration
  value: 'Release'
- name: BuildParameters.Version
  value: '3.1.$(Build.BuildNumber)'
# Computed variables
- name: ComputedParameters.CleanSourceBranch
  value: $[replace(variables['Build.SourceBranch'], 'refs/heads/', '')]
- name: ComputedParameters.IsMain
  value: $[eq(variables['ComputedParameters.CleanSourceBranch'], variables['BuildParameters.MainBranchName'])]
- name: ComputedParameters.IsPr
  value: $[eq(variables['Build.Reason'], 'PullRequest')]

name: $(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

# Trigger section does not support variables
trigger:
  batch: true
  branches:
    include:
    - master

resources:
  repositories:
  - repository: self
    type: git
    ref: $(BuildParameters.MainBranchName)

jobs:
- job: BuildAndTestSolution
  displayName: Build and test solution
  pool:
    vmImage: windows-2019

  steps:
  - checkout: self

  - task: NuGetToolInstaller@0
    displayName: Use NuGet 5.x
    inputs:
      versionSpec: '5.x'

  - task: NuGetCommand@2
    inputs:
      command: 'restore'
      restoreSolution: '$(BuildParameters.Solution)'
      feedsToUse: 'config'
      nugetConfigPath: 'nuget.config'

  ###########
  ## BUILD ##
  ###########
  - task: VSBuild@1
    displayName: Build solution
    inputs:
      solution: $(BuildParameters.Solution)
      msbuildArgs: /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactstagingdirectory)\\" /p:Version=$(BuildParameters.Version)
      platform: $(BuildParameters.BuildPlatform)
      configuration: $(BuildParameters.BuildConfiguration)

  - task: NodeTool@1 
    displayName: 'Use node version 10.x'
    inputs:
      versionSpec: '10.x'

  - script: cd HealthCheck.Frontend/ && yarn
    displayName: 'Yarn install'
  - script: cd HealthCheck.Frontend/ && yarn build
    displayName: 'Yarn build'
  
  ##########
  ## TEST ##
  ##########
  - task: VSTest@2
    displayName: Test Assemblies
    inputs:
      testAssemblyVer2: >-
        **\$(BuildParameters.BuildConfiguration)\**\*.tests.dll

        !**\obj\**
      platform: $(BuildParameters.BuildPlatform)
      configuration: $(BuildParameters.BuildConfiguration)

  #############
  ## PUBLISH ##
  #############
  - task: NuGetCommand@2
    displayName: Publish to nuget.org
    condition: and(succeeded(), eq(variables['ComputedParameters.IsMain'], 'true'))
    inputs:
      command: 'push'
      packagesToPush: '**/Release/*.nupkg;!**/*.symbols.nupkg'
      nuGetFeedType: 'internal'
      publishPackageMetadata: false

- task: Npm@1
  displayName: Publish to npmjs.org
  inputs:
    command: 'publish'
    workingDir: 'HealthCheck.Frontend/dist/'
    verbose: true
    publishRegistry: 'useFeed'
    publishFeed: '3d5fac32-7118-44ac-a9e9-e205c503bcc3'
    publishPackageMetadata: false
...
