<!-- src/components/ItemDetailsDialogComponent.vue -->
<template>
    <div>
    <v-dialog
      v-model="visible"
      v-if="item != null && item != undefined"
      width="800">

      <v-card>
        <v-card-title
          class="headline grey lighten-2"
          primary-title>
          {{item.Title}}
        </v-card-title>

        <v-card-text>
          <v-btn small
            v-for="(jItem, index) in jiraChanges"
            :key="'btn-jira-'+index"
            :href="jItem.JiraIssueUrl">
            Jira issue {{jItem.JiraIssueId}}
            <v-icon right>fab fa-jira</v-icon>
          </v-btn>

          <v-btn small
            v-for="(prItem, index) in pullRequestChanges"
            :key="'btn-pr-'+index"
            :href="prItem.PullRequestUrl">
            PR #{{prItem.PullRequestNumber}}
            <v-icon right>fab fa-github</v-icon>
          </v-btn>

          <v-chip>
            Build {{tcBuildRange}}
          </v-chip>

          <v-chip>
            Changed at {{changeDates}}
          </v-chip>

          <h4 v-if="pullRequestChanges.length > 0" class="mb-0 mt-4">Pull requests</h4>
          <ul v-if="pullRequestChanges.length > 0">
            <li v-for="(prItem, index) in pullRequestChanges" 
              :key="'details-pr-'+index">
              <a :href="prItem.PullRequestUrl">
                <h4 class="mb-0 mt-0">PR #{{prItem.PullRequestNumber}}: {{prItem.PullRequestTitle}}</h4>
              </a>
              <div><pre>{{ prItem.PullRequestDescription }}</pre></div>
            </li>
          </ul>

          <h4 v-if="commitChanges.length > 0" class="mb-0 mt-4">Commits</h4>
          <ul v-if="commitChanges.length > 0">
            <li 
              v-for="(change,index) in commitChanges" 
              :key="'details-commit-'+index">
              <div><pre>{{ change.CommitMessage }}</pre></div>
            </li>
          </ul>
        </v-card-text>

        <v-divider></v-divider>

        <v-card-actions>
          <v-spacer></v-spacer>
          <v-btn
            color="primary"
            flat
            @click="closeDialog()">
            Close
          </v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>
    </div>
</template>

<script lang="ts">
import { Vue, Component, Prop } from "vue-property-decorator";
import ReleaseNoteItemViewModel from '../models/ReleaseNoteItemViewModel';
import ReleaseNotesItem from "../models/ReleaseNotesJson/ReleaseNotesItem";
import LocalizedTexts from '../models/LocalizedTexts';

@Component
export default class ItemDetailsDialogComponent extends Vue {
    @Prop({ required: true })
    item!: ReleaseNoteItemViewModel;
    @Prop({ required: true })
    texts!: LocalizedTexts;

    visible: boolean = false;

    mounted(): void {
    }

    closeDialog(): void {
      this.visible = false;
    }

    showDialog(): void {
      this.visible = true;
    }

    get jiraChanges(): Array<ReleaseNotesItem>
    {
      let changes = this.item.Changes.filter(x => x.HasJiraIssueId);
      return this.removeDuplicates(changes, "JiraIssueId");
    }

    get pullRequestChanges(): Array<ReleaseNotesItem>
    {
      let changes = this.item.Changes.filter(x => x.HasPullRequestNumber);
      return this.removeDuplicates(changes, "PullRequestNumber");
    }

    get commitChanges(): Array<ReleaseNotesItem>
    {
      let changes = this.item.Changes.filter(x => x.CommitMessage != null && x.CommitMessage != undefined && x.CommitMessage.length > 0);
      return this.removeDuplicates(changes, "CommitMessage");
    }

    get tcBuildRange(): string
    {
      const uniqueBuilds = new Set(this.item.Changes.map(x => " " + x.BuildVersion));
      return Array.from(uniqueBuilds.values()).join();
    }

    get changeDates(): string
    {
      let locale = this.texts.datetime_locale || "en-us";
      const uniqueTimes = new Set(this.item.Changes.map(x => {
        let date = new Date(x.ChangeDate);
        return ` ${date.getDate()}. ${date.toLocaleString(locale, { month: "long" })}`;
      }));
      return Array.from(uniqueTimes.values()).join();
    }

    removeDuplicates(myArr: any, prop: any): any {
      return myArr.filter((obj: any, pos: any, arr: any) => {
        return arr.map((mapObj: any) => mapObj[prop]).indexOf(obj[prop]) === pos;
      });
    }
  }
</script>

<style>
pre {
  font-size: small;
}
</style>
